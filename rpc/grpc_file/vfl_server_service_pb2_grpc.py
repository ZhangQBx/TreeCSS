# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc.grpc_file.vfl_server_service_pb2 as vfl__server__service__pb2


class VFLServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.gather_lr_train_forward = channel.unary_unary(
                '/VFLServerService/gather_lr_train_forward',
                request_serializer=vfl__server__service__pb2.lr_train_forward_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.lr_train_forward_response.FromString,
                )
        self.gather_lr_test_forward = channel.unary_unary(
                '/VFLServerService/gather_lr_test_forward',
                request_serializer=vfl__server__service__pb2.lr_test_forward_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.lr_test_forward_response.FromString,
                )
        self.gather_mlp_train_bottom_forward = channel.unary_unary(
                '/VFLServerService/gather_mlp_train_bottom_forward',
                request_serializer=vfl__server__service__pb2.mlp_train_bottom_forward_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.mlp_train_batch_gradient_response.FromString,
                )
        self.gather_mlp_test_bottom_forward = channel.unary_unary(
                '/VFLServerService/gather_mlp_test_bottom_forward',
                request_serializer=vfl__server__service__pb2.mlp_test_bottom_forward_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.mlp_test_bottom_forward_response.FromString,
                )
        self.gather_knn_distance = channel.unary_unary(
                '/VFLServerService/gather_knn_distance',
                request_serializer=vfl__server__service__pb2.knn_distance_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.knn_distance_response.FromString,
                )
        self.get_vfl_server_psi_status = channel.unary_unary(
                '/VFLServerService/get_vfl_server_psi_status',
                request_serializer=vfl__server__service__pb2.client_psi_status_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.vfl_server_psi_status_response.FromString,
                )
        self.get_label_owner_psi_result = channel.unary_unary(
                '/VFLServerService/get_label_owner_psi_result',
                request_serializer=vfl__server__service__pb2.label_owner_psi_result_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.vfl_server_psi_result_response.FromString,
                )
        self.get_client_align_index = channel.unary_unary(
                '/VFLServerService/get_client_align_index',
                request_serializer=vfl__server__service__pb2.client_cluster_info_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.vfl_server_align_index_response.FromString,
                )
        self.invite_label_owner_psi_server = channel.unary_unary(
                '/VFLServerService/invite_label_owner_psi_server',
                request_serializer=vfl__server__service__pb2.kmeans_finish_request.SerializeToString,
                response_deserializer=vfl__server__service__pb2.kmeans_finish_response.FromString,
                )


class VFLServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def gather_lr_train_forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gather_lr_test_forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gather_mlp_train_bottom_forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gather_mlp_test_bottom_forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gather_knn_distance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_vfl_server_psi_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_label_owner_psi_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_client_align_index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invite_label_owner_psi_server(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VFLServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'gather_lr_train_forward': grpc.unary_unary_rpc_method_handler(
                    servicer.gather_lr_train_forward,
                    request_deserializer=vfl__server__service__pb2.lr_train_forward_request.FromString,
                    response_serializer=vfl__server__service__pb2.lr_train_forward_response.SerializeToString,
            ),
            'gather_lr_test_forward': grpc.unary_unary_rpc_method_handler(
                    servicer.gather_lr_test_forward,
                    request_deserializer=vfl__server__service__pb2.lr_test_forward_request.FromString,
                    response_serializer=vfl__server__service__pb2.lr_test_forward_response.SerializeToString,
            ),
            'gather_mlp_train_bottom_forward': grpc.unary_unary_rpc_method_handler(
                    servicer.gather_mlp_train_bottom_forward,
                    request_deserializer=vfl__server__service__pb2.mlp_train_bottom_forward_request.FromString,
                    response_serializer=vfl__server__service__pb2.mlp_train_batch_gradient_response.SerializeToString,
            ),
            'gather_mlp_test_bottom_forward': grpc.unary_unary_rpc_method_handler(
                    servicer.gather_mlp_test_bottom_forward,
                    request_deserializer=vfl__server__service__pb2.mlp_test_bottom_forward_request.FromString,
                    response_serializer=vfl__server__service__pb2.mlp_test_bottom_forward_response.SerializeToString,
            ),
            'gather_knn_distance': grpc.unary_unary_rpc_method_handler(
                    servicer.gather_knn_distance,
                    request_deserializer=vfl__server__service__pb2.knn_distance_request.FromString,
                    response_serializer=vfl__server__service__pb2.knn_distance_response.SerializeToString,
            ),
            'get_vfl_server_psi_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_vfl_server_psi_status,
                    request_deserializer=vfl__server__service__pb2.client_psi_status_request.FromString,
                    response_serializer=vfl__server__service__pb2.vfl_server_psi_status_response.SerializeToString,
            ),
            'get_label_owner_psi_result': grpc.unary_unary_rpc_method_handler(
                    servicer.get_label_owner_psi_result,
                    request_deserializer=vfl__server__service__pb2.label_owner_psi_result_request.FromString,
                    response_serializer=vfl__server__service__pb2.vfl_server_psi_result_response.SerializeToString,
            ),
            'get_client_align_index': grpc.unary_unary_rpc_method_handler(
                    servicer.get_client_align_index,
                    request_deserializer=vfl__server__service__pb2.client_cluster_info_request.FromString,
                    response_serializer=vfl__server__service__pb2.vfl_server_align_index_response.SerializeToString,
            ),
            'invite_label_owner_psi_server': grpc.unary_unary_rpc_method_handler(
                    servicer.invite_label_owner_psi_server,
                    request_deserializer=vfl__server__service__pb2.kmeans_finish_request.FromString,
                    response_serializer=vfl__server__service__pb2.kmeans_finish_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VFLServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VFLServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def gather_lr_train_forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/gather_lr_train_forward',
            vfl__server__service__pb2.lr_train_forward_request.SerializeToString,
            vfl__server__service__pb2.lr_train_forward_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gather_lr_test_forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/gather_lr_test_forward',
            vfl__server__service__pb2.lr_test_forward_request.SerializeToString,
            vfl__server__service__pb2.lr_test_forward_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gather_mlp_train_bottom_forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/gather_mlp_train_bottom_forward',
            vfl__server__service__pb2.mlp_train_bottom_forward_request.SerializeToString,
            vfl__server__service__pb2.mlp_train_batch_gradient_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gather_mlp_test_bottom_forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/gather_mlp_test_bottom_forward',
            vfl__server__service__pb2.mlp_test_bottom_forward_request.SerializeToString,
            vfl__server__service__pb2.mlp_test_bottom_forward_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gather_knn_distance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/gather_knn_distance',
            vfl__server__service__pb2.knn_distance_request.SerializeToString,
            vfl__server__service__pb2.knn_distance_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_vfl_server_psi_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/get_vfl_server_psi_status',
            vfl__server__service__pb2.client_psi_status_request.SerializeToString,
            vfl__server__service__pb2.vfl_server_psi_status_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_label_owner_psi_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/get_label_owner_psi_result',
            vfl__server__service__pb2.label_owner_psi_result_request.SerializeToString,
            vfl__server__service__pb2.vfl_server_psi_result_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_client_align_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/get_client_align_index',
            vfl__server__service__pb2.client_cluster_info_request.SerializeToString,
            vfl__server__service__pb2.vfl_server_align_index_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def invite_label_owner_psi_server(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLServerService/invite_label_owner_psi_server',
            vfl__server__service__pb2.kmeans_finish_request.SerializeToString,
            vfl__server__service__pb2.kmeans_finish_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
