# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc.grpc_file.vfl_label_owner_service_pb2 as vfl__label__owner__service__pb2


class VFLLabelOwnerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_rsa_public_key_label_owner = channel.unary_unary(
                '/VFLLabelOwnerService/send_rsa_public_key_label_owner',
                request_serializer=vfl__label__owner__service__pb2.rsa_public_key_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.rsa_public_key_response_label_owner.FromString,
                )
        self.send_client_enc_ids_label_owner = channel.unary_unary(
                '/VFLLabelOwnerService/send_client_enc_ids_label_owner',
                request_serializer=vfl__label__owner__service__pb2.send_client_enc_ids_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.send_client_enc_ids_response_label_owner.FromString,
                )
        self.send_server_enc_ids_and_client_dec_ids_label_owner = channel.unary_unary(
                '/VFLLabelOwnerService/send_server_enc_ids_and_client_dec_ids_label_owner',
                request_serializer=vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_response_label_owner.FromString,
                )
        self.invite_label_owner_psi = channel.unary_unary(
                '/VFLLabelOwnerService/invite_label_owner_psi',
                request_serializer=vfl__label__owner__service__pb2.invite_psi_request.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.invite_psi_response.FromString,
                )
        self.get_lr_train_batch_gradient = channel.unary_unary(
                '/VFLLabelOwnerService/get_lr_train_batch_gradient',
                request_serializer=vfl__label__owner__service__pb2.lr_train_forward_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.lr_train_forward_response_label_owner.FromString,
                )
        self.calculate_lr_test_accuracy = channel.unary_unary(
                '/VFLLabelOwnerService/calculate_lr_test_accuracy',
                request_serializer=vfl__label__owner__service__pb2.lr_test_forward_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.lr_test_forward_response_label_owner.FromString,
                )
        self.get_mlp_train_batch_gradient = channel.unary_unary(
                '/VFLLabelOwnerService/get_mlp_train_batch_gradient',
                request_serializer=vfl__label__owner__service__pb2.mlp_train_top_forward_request.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.mlp_train_top_forward_response.FromString,
                )
        self.calculate_mlp_test_accuracy = channel.unary_unary(
                '/VFLLabelOwnerService/calculate_mlp_test_accuracy',
                request_serializer=vfl__label__owner__service__pb2.mlp_test_top_forward_request.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.mlp_test_top_forward_response.FromString,
                )
        self.calculate_knn_accuracy = channel.unary_unary(
                '/VFLLabelOwnerService/calculate_knn_accuracy',
                request_serializer=vfl__label__owner__service__pb2.knn_distance_request_label_owner.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.knn_distance_response_label_owner.FromString,
                )
        self.calculate_client_align_index = channel.unary_unary(
                '/VFLLabelOwnerService/calculate_client_align_index',
                request_serializer=vfl__label__owner__service__pb2.server_cluster_info_request.SerializeToString,
                response_deserializer=vfl__label__owner__service__pb2.label_owner_align_index_response.FromString,
                )


class VFLLabelOwnerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_rsa_public_key_label_owner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_client_enc_ids_label_owner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_server_enc_ids_and_client_dec_ids_label_owner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invite_label_owner_psi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_lr_train_batch_gradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculate_lr_test_accuracy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_mlp_train_batch_gradient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculate_mlp_test_accuracy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculate_knn_accuracy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculate_client_align_index(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VFLLabelOwnerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_rsa_public_key_label_owner': grpc.unary_unary_rpc_method_handler(
                    servicer.send_rsa_public_key_label_owner,
                    request_deserializer=vfl__label__owner__service__pb2.rsa_public_key_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.rsa_public_key_response_label_owner.SerializeToString,
            ),
            'send_client_enc_ids_label_owner': grpc.unary_unary_rpc_method_handler(
                    servicer.send_client_enc_ids_label_owner,
                    request_deserializer=vfl__label__owner__service__pb2.send_client_enc_ids_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.send_client_enc_ids_response_label_owner.SerializeToString,
            ),
            'send_server_enc_ids_and_client_dec_ids_label_owner': grpc.unary_unary_rpc_method_handler(
                    servicer.send_server_enc_ids_and_client_dec_ids_label_owner,
                    request_deserializer=vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_response_label_owner.SerializeToString,
            ),
            'invite_label_owner_psi': grpc.unary_unary_rpc_method_handler(
                    servicer.invite_label_owner_psi,
                    request_deserializer=vfl__label__owner__service__pb2.invite_psi_request.FromString,
                    response_serializer=vfl__label__owner__service__pb2.invite_psi_response.SerializeToString,
            ),
            'get_lr_train_batch_gradient': grpc.unary_unary_rpc_method_handler(
                    servicer.get_lr_train_batch_gradient,
                    request_deserializer=vfl__label__owner__service__pb2.lr_train_forward_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.lr_train_forward_response_label_owner.SerializeToString,
            ),
            'calculate_lr_test_accuracy': grpc.unary_unary_rpc_method_handler(
                    servicer.calculate_lr_test_accuracy,
                    request_deserializer=vfl__label__owner__service__pb2.lr_test_forward_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.lr_test_forward_response_label_owner.SerializeToString,
            ),
            'get_mlp_train_batch_gradient': grpc.unary_unary_rpc_method_handler(
                    servicer.get_mlp_train_batch_gradient,
                    request_deserializer=vfl__label__owner__service__pb2.mlp_train_top_forward_request.FromString,
                    response_serializer=vfl__label__owner__service__pb2.mlp_train_top_forward_response.SerializeToString,
            ),
            'calculate_mlp_test_accuracy': grpc.unary_unary_rpc_method_handler(
                    servicer.calculate_mlp_test_accuracy,
                    request_deserializer=vfl__label__owner__service__pb2.mlp_test_top_forward_request.FromString,
                    response_serializer=vfl__label__owner__service__pb2.mlp_test_top_forward_response.SerializeToString,
            ),
            'calculate_knn_accuracy': grpc.unary_unary_rpc_method_handler(
                    servicer.calculate_knn_accuracy,
                    request_deserializer=vfl__label__owner__service__pb2.knn_distance_request_label_owner.FromString,
                    response_serializer=vfl__label__owner__service__pb2.knn_distance_response_label_owner.SerializeToString,
            ),
            'calculate_client_align_index': grpc.unary_unary_rpc_method_handler(
                    servicer.calculate_client_align_index,
                    request_deserializer=vfl__label__owner__service__pb2.server_cluster_info_request.FromString,
                    response_serializer=vfl__label__owner__service__pb2.label_owner_align_index_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VFLLabelOwnerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VFLLabelOwnerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_rsa_public_key_label_owner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/send_rsa_public_key_label_owner',
            vfl__label__owner__service__pb2.rsa_public_key_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.rsa_public_key_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_client_enc_ids_label_owner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/send_client_enc_ids_label_owner',
            vfl__label__owner__service__pb2.send_client_enc_ids_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.send_client_enc_ids_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_server_enc_ids_and_client_dec_ids_label_owner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/send_server_enc_ids_and_client_dec_ids_label_owner',
            vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.send_server_enc_ids_and_client_dec_ids_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def invite_label_owner_psi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/invite_label_owner_psi',
            vfl__label__owner__service__pb2.invite_psi_request.SerializeToString,
            vfl__label__owner__service__pb2.invite_psi_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_lr_train_batch_gradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/get_lr_train_batch_gradient',
            vfl__label__owner__service__pb2.lr_train_forward_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.lr_train_forward_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calculate_lr_test_accuracy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/calculate_lr_test_accuracy',
            vfl__label__owner__service__pb2.lr_test_forward_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.lr_test_forward_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_mlp_train_batch_gradient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/get_mlp_train_batch_gradient',
            vfl__label__owner__service__pb2.mlp_train_top_forward_request.SerializeToString,
            vfl__label__owner__service__pb2.mlp_train_top_forward_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calculate_mlp_test_accuracy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/calculate_mlp_test_accuracy',
            vfl__label__owner__service__pb2.mlp_test_top_forward_request.SerializeToString,
            vfl__label__owner__service__pb2.mlp_test_top_forward_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calculate_knn_accuracy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/calculate_knn_accuracy',
            vfl__label__owner__service__pb2.knn_distance_request_label_owner.SerializeToString,
            vfl__label__owner__service__pb2.knn_distance_response_label_owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def calculate_client_align_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VFLLabelOwnerService/calculate_client_align_index',
            vfl__label__owner__service__pb2.server_cluster_info_request.SerializeToString,
            vfl__label__owner__service__pb2.label_owner_align_index_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
