syntax = "proto3";

message lr_train_batch_gradient_request{
  int32 server_id = 1;
  int32 batch_index = 2;
//  bytes batch_gradient = 3;
  repeated float batch_gradient = 3;
}

message lr_train_batch_gradient_response{
  int32 server_id = 1;
  bool receive_flag = 2;
}

message rsa_public_key_request{
  int32 cid = 1;
  int32 qid = 2;
  bytes pk_N = 3;
  int32 pk_e = 4;
}

message rsa_public_key_response{
  int32 cid = 1;
  int32 qid = 2;
  bool recv_status = 3;
}

message send_client_enc_ids_request{
  int32 cid = 1;
  int32 qid = 2;
  repeated string client_enc_ids_pk_str = 3;
}

message send_client_enc_ids_response{
  int32 cid = 1;
  int32 qid = 2;
  bool recv_status = 3;
  //  repeated string client_dec_ids_sk = 3;
  //  repeated string server_enc_ids_sk = 4;
}

message send_server_enc_ids_and_client_dec_ids_request{
  int32 cid = 1;
  int32 qid = 2;
  repeated string client_dec_ids = 3;
  repeated string server_hash_enc_ids = 4;
}

message send_server_enc_ids_and_client_dec_ids_response{
  int32 cid = 1;
  int32 qid = 2;
  bool client_dec_ids_recv_status = 3;
  bool server_hash_enc_ids_recv_status = 4;
}

service VFLClientService{
  rpc send_lr_train_batch_gradient(lr_train_batch_gradient_request) returns (lr_train_batch_gradient_response);
  rpc send_rsa_public_key(rsa_public_key_request) returns(rsa_public_key_response);
  rpc send_client_enc_ids(send_client_enc_ids_request) returns(send_client_enc_ids_response);
  rpc send_server_enc_ids_and_client_dec_ids(send_server_enc_ids_and_client_dec_ids_request)
      returns(send_server_enc_ids_and_client_dec_ids_response);
}